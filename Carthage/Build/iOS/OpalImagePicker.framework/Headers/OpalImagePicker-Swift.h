#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OpalImagePicker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UICollectionViewUpdateItem;
@class UICollectionViewLayoutAttributes;
@class NSCoder;

/// Collection View Layout that evenly lays out the images in the Image Picker.
SWIFT_CLASS("_TtC15OpalImagePicker35OpalImagePickerCollectionViewLayout")
@interface OpalImagePickerCollectionViewLayout : UICollectionViewLayout
/// Prepare for Collection View Update
/// \param updateItems Items to update
///
- (void)prepareForCollectionViewUpdates:(NSArray<UICollectionViewUpdateItem *> * _Nonnull)updateItems;
/// Prepare the layout
- (void)prepareLayout;
/// Returns <code>Bool</code> telling should invalidate layout
/// \param newBounds the new bounds
///
///
/// returns:
/// Returns a <code>Bool</code> telling should invalidate layout
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// Returns layout attributes for indexPath
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns layout attributes
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of layout attributes for items in rect
/// \param rect the Rect
///
///
/// returns:
/// Returns a list of layout attributes
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Collection View Content Size
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration. Optionally change localized strings.
SWIFT_CLASS("_TtC15OpalImagePicker28OpalImagePickerConfiguration")
@interface OpalImagePickerConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OpalImagePickerControllerDelegate;
@class UIColor;
@class UIImage;
@class UIViewController;

/// Image Picker Controller. Displays images from the Photo Library. Must check Photo Library permissions before attempting to display this controller.
SWIFT_CLASS("_TtC15OpalImagePicker25OpalImagePickerController")
@interface OpalImagePickerController : UINavigationController
/// Image Picker Delegate. Notifies when images are selected or image picker is cancelled.
@property (nonatomic, weak) id <OpalImagePickerControllerDelegate> _Nullable imagePickerDelegate;
/// Configuration to change Localized Strings
@property (nonatomic, strong) OpalImagePickerConfiguration * _Nullable configuration;
/// Custom Tint Color for overlay of selected images.
@property (nonatomic, strong) UIColor * _Nullable selectionTintColor;
/// Custom Tint Color for selection image (checkmark).
@property (nonatomic, strong) UIColor * _Nullable selectionImageTintColor;
/// Custom selection image (checkmark).
@property (nonatomic, strong) UIImage * _Nullable selectionImage;
/// Maximum photo selections allowed in picker (zero or fewer means unlimited).
@property (nonatomic) NSInteger maximumSelectionsAllowed;
/// Status Bar Preference (defaults to <code>default</code>)
@property (nonatomic) UIStatusBarStyle statusBarPreference;
/// External <code>UIToolbar</code> barTintColor.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarBarTintColor;
/// External <code>UIToolbar</code> and <code>UISegmentedControl</code> tint color.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarTintColor;
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
/// \param nibNameOrNil the nib name
///
/// \param nibBundleOrNil the nib <code>Bundle</code>
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

@class PHAsset;

/// Image Picker Controller Delegate. Notifies when images are selected or image picker is cancelled.
SWIFT_PROTOCOL("_TtP15OpalImagePicker33OpalImagePickerControllerDelegate_")
@protocol OpalImagePickerControllerDelegate
@optional
/// Image Picker did finish picking images. Provides an array of <code>UIImage</code> selected. Also provides external
/// images if they are used. Consider using setting <code>maximumSelectionsAllowed</code> when using this delegate method
/// because several <code>UIImage</code> objects are stored in memory when you implement this delegate function.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param images the array of <code>UIImage</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingImages:(NSArray<UIImage *> * _Nonnull)images;
/// Image Picker did finish picking images. Provides an array of <code>PHAsset</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param assets the array of <code>PHAsset</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingAssets:(NSArray<PHAsset *> * _Nonnull)assets;
/// Image Picker did cancel.
/// \param picker the <code>OpalImagePickerController</code>
///
- (void)imagePickerDidCancel:(OpalImagePickerController * _Nonnull)picker;
/// Image Picker Number of External items. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// an <code>Int</code> describing the number of available external image <code>URL</code>
- (NSInteger)imagePickerNumberOfExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker returns the <code>URL</code> for an image at an <code>Int</code> index. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param index the <code>Int</code> index for the image
///
///
/// returns:
/// the <code>URL</code>
- (NSURL * _Nullable)imagePicker:(OpalImagePickerController * _Nonnull)picker imageURLforExternalItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Image Picker external title. This will appear in the <code>UISegmentedControl</code>. Make sure to provide a Localized String.
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// the <code>String</code>. This should be a Localized String.
- (NSString * _Nonnull)imagePickerTitleForExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker did finish picking external images. Provides an array of <code>URL</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param urls the array of <code>URL</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingExternalURLs:(NSArray<NSURL *> * _Nonnull)urls;
@end


/// Image Picker Root View Controller contains the logic for selecting images. The images are displayed in a <code>UICollectionView</code>, and multiple images can be selected.
SWIFT_CLASS("_TtC15OpalImagePicker33OpalImagePickerRootViewController")
@interface OpalImagePickerRootViewController : UIViewController
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this View Controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load View
- (void)loadView;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDelegate>
/// Collection View did select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Collection View did de-select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewCell;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDataSource>
/// Returns Collection View Cell for item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns the <code>UICollectionViewCell</code>
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns the number of items in a given section
/// \param collectionView the <code>UICollectionView</code>
///
/// \param section the given section of the <code>UICollectionView</code>
///
///
/// returns:
/// Returns an <code>Int</code> for the number of rows.
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OpalImagePicker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UICollectionViewUpdateItem;
@class UICollectionViewLayoutAttributes;
@class NSCoder;

/// Collection View Layout that evenly lays out the images in the Image Picker.
SWIFT_CLASS("_TtC15OpalImagePicker35OpalImagePickerCollectionViewLayout")
@interface OpalImagePickerCollectionViewLayout : UICollectionViewLayout
/// Prepare for Collection View Update
/// \param updateItems Items to update
///
- (void)prepareForCollectionViewUpdates:(NSArray<UICollectionViewUpdateItem *> * _Nonnull)updateItems;
/// Prepare the layout
- (void)prepareLayout;
/// Returns <code>Bool</code> telling should invalidate layout
/// \param newBounds the new bounds
///
///
/// returns:
/// Returns a <code>Bool</code> telling should invalidate layout
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// Returns layout attributes for indexPath
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns layout attributes
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of layout attributes for items in rect
/// \param rect the Rect
///
///
/// returns:
/// Returns a list of layout attributes
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Collection View Content Size
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration. Optionally change localized strings.
SWIFT_CLASS("_TtC15OpalImagePicker28OpalImagePickerConfiguration")
@interface OpalImagePickerConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OpalImagePickerControllerDelegate;
@class UIColor;
@class UIImage;
@class UIViewController;

/// Image Picker Controller. Displays images from the Photo Library. Must check Photo Library permissions before attempting to display this controller.
SWIFT_CLASS("_TtC15OpalImagePicker25OpalImagePickerController")
@interface OpalImagePickerController : UINavigationController
/// Image Picker Delegate. Notifies when images are selected or image picker is cancelled.
@property (nonatomic, weak) id <OpalImagePickerControllerDelegate> _Nullable imagePickerDelegate;
/// Configuration to change Localized Strings
@property (nonatomic, strong) OpalImagePickerConfiguration * _Nullable configuration;
/// Custom Tint Color for overlay of selected images.
@property (nonatomic, strong) UIColor * _Nullable selectionTintColor;
/// Custom Tint Color for selection image (checkmark).
@property (nonatomic, strong) UIColor * _Nullable selectionImageTintColor;
/// Custom selection image (checkmark).
@property (nonatomic, strong) UIImage * _Nullable selectionImage;
/// Maximum photo selections allowed in picker (zero or fewer means unlimited).
@property (nonatomic) NSInteger maximumSelectionsAllowed;
/// Status Bar Preference (defaults to <code>default</code>)
@property (nonatomic) UIStatusBarStyle statusBarPreference;
/// External <code>UIToolbar</code> barTintColor.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarBarTintColor;
/// External <code>UIToolbar</code> and <code>UISegmentedControl</code> tint color.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarTintColor;
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
/// \param nibNameOrNil the nib name
///
/// \param nibBundleOrNil the nib <code>Bundle</code>
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

@class PHAsset;

/// Image Picker Controller Delegate. Notifies when images are selected or image picker is cancelled.
SWIFT_PROTOCOL("_TtP15OpalImagePicker33OpalImagePickerControllerDelegate_")
@protocol OpalImagePickerControllerDelegate
@optional
/// Image Picker did finish picking images. Provides an array of <code>UIImage</code> selected. Also provides external
/// images if they are used. Consider using setting <code>maximumSelectionsAllowed</code> when using this delegate method
/// because several <code>UIImage</code> objects are stored in memory when you implement this delegate function.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param images the array of <code>UIImage</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingImages:(NSArray<UIImage *> * _Nonnull)images;
/// Image Picker did finish picking images. Provides an array of <code>PHAsset</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param assets the array of <code>PHAsset</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingAssets:(NSArray<PHAsset *> * _Nonnull)assets;
/// Image Picker did cancel.
/// \param picker the <code>OpalImagePickerController</code>
///
- (void)imagePickerDidCancel:(OpalImagePickerController * _Nonnull)picker;
/// Image Picker Number of External items. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// an <code>Int</code> describing the number of available external image <code>URL</code>
- (NSInteger)imagePickerNumberOfExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker returns the <code>URL</code> for an image at an <code>Int</code> index. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param index the <code>Int</code> index for the image
///
///
/// returns:
/// the <code>URL</code>
- (NSURL * _Nullable)imagePicker:(OpalImagePickerController * _Nonnull)picker imageURLforExternalItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Image Picker external title. This will appear in the <code>UISegmentedControl</code>. Make sure to provide a Localized String.
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// the <code>String</code>. This should be a Localized String.
- (NSString * _Nonnull)imagePickerTitleForExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker did finish picking external images. Provides an array of <code>URL</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param urls the array of <code>URL</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingExternalURLs:(NSArray<NSURL *> * _Nonnull)urls;
@end


/// Image Picker Root View Controller contains the logic for selecting images. The images are displayed in a <code>UICollectionView</code>, and multiple images can be selected.
SWIFT_CLASS("_TtC15OpalImagePicker33OpalImagePickerRootViewController")
@interface OpalImagePickerRootViewController : UIViewController
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this View Controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load View
- (void)loadView;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDelegate>
/// Collection View did select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Collection View did de-select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewCell;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDataSource>
/// Returns Collection View Cell for item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns the <code>UICollectionViewCell</code>
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns the number of items in a given section
/// \param collectionView the <code>UICollectionView</code>
///
/// \param section the given section of the <code>UICollectionView</code>
///
///
/// returns:
/// Returns an <code>Int</code> for the number of rows.
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OpalImagePicker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UICollectionViewUpdateItem;
@class UICollectionViewLayoutAttributes;
@class NSCoder;

/// Collection View Layout that evenly lays out the images in the Image Picker.
SWIFT_CLASS("_TtC15OpalImagePicker35OpalImagePickerCollectionViewLayout")
@interface OpalImagePickerCollectionViewLayout : UICollectionViewLayout
/// Prepare for Collection View Update
/// \param updateItems Items to update
///
- (void)prepareForCollectionViewUpdates:(NSArray<UICollectionViewUpdateItem *> * _Nonnull)updateItems;
/// Prepare the layout
- (void)prepareLayout;
/// Returns <code>Bool</code> telling should invalidate layout
/// \param newBounds the new bounds
///
///
/// returns:
/// Returns a <code>Bool</code> telling should invalidate layout
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// Returns layout attributes for indexPath
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns layout attributes
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of layout attributes for items in rect
/// \param rect the Rect
///
///
/// returns:
/// Returns a list of layout attributes
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Collection View Content Size
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration. Optionally change localized strings.
SWIFT_CLASS("_TtC15OpalImagePicker28OpalImagePickerConfiguration")
@interface OpalImagePickerConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OpalImagePickerControllerDelegate;
@class UIColor;
@class UIImage;
@class UIViewController;

/// Image Picker Controller. Displays images from the Photo Library. Must check Photo Library permissions before attempting to display this controller.
SWIFT_CLASS("_TtC15OpalImagePicker25OpalImagePickerController")
@interface OpalImagePickerController : UINavigationController
/// Image Picker Delegate. Notifies when images are selected or image picker is cancelled.
@property (nonatomic, weak) id <OpalImagePickerControllerDelegate> _Nullable imagePickerDelegate;
/// Configuration to change Localized Strings
@property (nonatomic, strong) OpalImagePickerConfiguration * _Nullable configuration;
/// Custom Tint Color for overlay of selected images.
@property (nonatomic, strong) UIColor * _Nullable selectionTintColor;
/// Custom Tint Color for selection image (checkmark).
@property (nonatomic, strong) UIColor * _Nullable selectionImageTintColor;
/// Custom selection image (checkmark).
@property (nonatomic, strong) UIImage * _Nullable selectionImage;
/// Maximum photo selections allowed in picker (zero or fewer means unlimited).
@property (nonatomic) NSInteger maximumSelectionsAllowed;
/// Status Bar Preference (defaults to <code>default</code>)
@property (nonatomic) UIStatusBarStyle statusBarPreference;
/// External <code>UIToolbar</code> barTintColor.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarBarTintColor;
/// External <code>UIToolbar</code> and <code>UISegmentedControl</code> tint color.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarTintColor;
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
/// \param nibNameOrNil the nib name
///
/// \param nibBundleOrNil the nib <code>Bundle</code>
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

@class PHAsset;

/// Image Picker Controller Delegate. Notifies when images are selected or image picker is cancelled.
SWIFT_PROTOCOL("_TtP15OpalImagePicker33OpalImagePickerControllerDelegate_")
@protocol OpalImagePickerControllerDelegate
@optional
/// Image Picker did finish picking images. Provides an array of <code>UIImage</code> selected. Also provides external
/// images if they are used. Consider using setting <code>maximumSelectionsAllowed</code> when using this delegate method
/// because several <code>UIImage</code> objects are stored in memory when you implement this delegate function.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param images the array of <code>UIImage</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingImages:(NSArray<UIImage *> * _Nonnull)images;
/// Image Picker did finish picking images. Provides an array of <code>PHAsset</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param assets the array of <code>PHAsset</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingAssets:(NSArray<PHAsset *> * _Nonnull)assets;
/// Image Picker did cancel.
/// \param picker the <code>OpalImagePickerController</code>
///
- (void)imagePickerDidCancel:(OpalImagePickerController * _Nonnull)picker;
/// Image Picker Number of External items. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// an <code>Int</code> describing the number of available external image <code>URL</code>
- (NSInteger)imagePickerNumberOfExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker returns the <code>URL</code> for an image at an <code>Int</code> index. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param index the <code>Int</code> index for the image
///
///
/// returns:
/// the <code>URL</code>
- (NSURL * _Nullable)imagePicker:(OpalImagePickerController * _Nonnull)picker imageURLforExternalItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Image Picker external title. This will appear in the <code>UISegmentedControl</code>. Make sure to provide a Localized String.
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// the <code>String</code>. This should be a Localized String.
- (NSString * _Nonnull)imagePickerTitleForExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker did finish picking external images. Provides an array of <code>URL</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param urls the array of <code>URL</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingExternalURLs:(NSArray<NSURL *> * _Nonnull)urls;
@end


/// Image Picker Root View Controller contains the logic for selecting images. The images are displayed in a <code>UICollectionView</code>, and multiple images can be selected.
SWIFT_CLASS("_TtC15OpalImagePicker33OpalImagePickerRootViewController")
@interface OpalImagePickerRootViewController : UIViewController
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this View Controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load View
- (void)loadView;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDelegate>
/// Collection View did select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Collection View did de-select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewCell;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDataSource>
/// Returns Collection View Cell for item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns the <code>UICollectionViewCell</code>
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns the number of items in a given section
/// \param collectionView the <code>UICollectionView</code>
///
/// \param section the given section of the <code>UICollectionView</code>
///
///
/// returns:
/// Returns an <code>Int</code> for the number of rows.
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OpalImagePicker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@class UICollectionViewUpdateItem;
@class UICollectionViewLayoutAttributes;
@class NSCoder;

/// Collection View Layout that evenly lays out the images in the Image Picker.
SWIFT_CLASS("_TtC15OpalImagePicker35OpalImagePickerCollectionViewLayout")
@interface OpalImagePickerCollectionViewLayout : UICollectionViewLayout
/// Prepare for Collection View Update
/// \param updateItems Items to update
///
- (void)prepareForCollectionViewUpdates:(NSArray<UICollectionViewUpdateItem *> * _Nonnull)updateItems;
/// Prepare the layout
- (void)prepareLayout;
/// Returns <code>Bool</code> telling should invalidate layout
/// \param newBounds the new bounds
///
///
/// returns:
/// Returns a <code>Bool</code> telling should invalidate layout
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
/// Returns layout attributes for indexPath
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns layout attributes
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of layout attributes for items in rect
/// \param rect the Rect
///
///
/// returns:
/// Returns a list of layout attributes
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
/// Collection View Content Size
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration. Optionally change localized strings.
SWIFT_CLASS("_TtC15OpalImagePicker28OpalImagePickerConfiguration")
@interface OpalImagePickerConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol OpalImagePickerControllerDelegate;
@class UIColor;
@class UIImage;
@class UIViewController;

/// Image Picker Controller. Displays images from the Photo Library. Must check Photo Library permissions before attempting to display this controller.
SWIFT_CLASS("_TtC15OpalImagePicker25OpalImagePickerController")
@interface OpalImagePickerController : UINavigationController
/// Image Picker Delegate. Notifies when images are selected or image picker is cancelled.
@property (nonatomic, weak) id <OpalImagePickerControllerDelegate> _Nullable imagePickerDelegate;
/// Configuration to change Localized Strings
@property (nonatomic, strong) OpalImagePickerConfiguration * _Nullable configuration;
/// Custom Tint Color for overlay of selected images.
@property (nonatomic, strong) UIColor * _Nullable selectionTintColor;
/// Custom Tint Color for selection image (checkmark).
@property (nonatomic, strong) UIColor * _Nullable selectionImageTintColor;
/// Custom selection image (checkmark).
@property (nonatomic, strong) UIImage * _Nullable selectionImage;
/// Maximum photo selections allowed in picker (zero or fewer means unlimited).
@property (nonatomic) NSInteger maximumSelectionsAllowed;
/// Status Bar Preference (defaults to <code>default</code>)
@property (nonatomic) UIStatusBarStyle statusBarPreference;
/// External <code>UIToolbar</code> barTintColor.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarBarTintColor;
/// External <code>UIToolbar</code> and <code>UISegmentedControl</code> tint color.
@property (nonatomic, strong) UIColor * _Nullable externalToolbarTintColor;
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
/// \param nibNameOrNil the nib name
///
/// \param nibBundleOrNil the nib <code>Bundle</code>
///
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

@class PHAsset;

/// Image Picker Controller Delegate. Notifies when images are selected or image picker is cancelled.
SWIFT_PROTOCOL("_TtP15OpalImagePicker33OpalImagePickerControllerDelegate_")
@protocol OpalImagePickerControllerDelegate
@optional
/// Image Picker did finish picking images. Provides an array of <code>UIImage</code> selected. Also provides external
/// images if they are used. Consider using setting <code>maximumSelectionsAllowed</code> when using this delegate method
/// because several <code>UIImage</code> objects are stored in memory when you implement this delegate function.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param images the array of <code>UIImage</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingImages:(NSArray<UIImage *> * _Nonnull)images;
/// Image Picker did finish picking images. Provides an array of <code>PHAsset</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param assets the array of <code>PHAsset</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingAssets:(NSArray<PHAsset *> * _Nonnull)assets;
/// Image Picker did cancel.
/// \param picker the <code>OpalImagePickerController</code>
///
- (void)imagePickerDidCancel:(OpalImagePickerController * _Nonnull)picker;
/// Image Picker Number of External items. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// an <code>Int</code> describing the number of available external image <code>URL</code>
- (NSInteger)imagePickerNumberOfExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker returns the <code>URL</code> for an image at an <code>Int</code> index. Optional use to provide items from external
/// sources e.g. (Facebook, Twitter, or Instagram).
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param index the <code>Int</code> index for the image
///
///
/// returns:
/// the <code>URL</code>
- (NSURL * _Nullable)imagePicker:(OpalImagePickerController * _Nonnull)picker imageURLforExternalItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Image Picker external title. This will appear in the <code>UISegmentedControl</code>. Make sure to provide a Localized String.
/// \param picker the <code>OpalImagePickerController</code>
///
///
/// returns:
/// the <code>String</code>. This should be a Localized String.
- (NSString * _Nonnull)imagePickerTitleForExternalItems:(OpalImagePickerController * _Nonnull)picker SWIFT_WARN_UNUSED_RESULT;
/// Image Picker did finish picking external images. Provides an array of <code>URL</code> selected.
/// \param picker the <code>OpalImagePickerController</code>
///
/// \param urls the array of <code>URL</code>
///
- (void)imagePicker:(OpalImagePickerController * _Nonnull)picker didFinishPickingExternalURLs:(NSArray<NSURL *> * _Nonnull)urls;
@end


/// Image Picker Root View Controller contains the logic for selecting images. The images are displayed in a <code>UICollectionView</code>, and multiple images can be selected.
SWIFT_CLASS("_TtC15OpalImagePicker33OpalImagePickerRootViewController")
@interface OpalImagePickerRootViewController : UIViewController
/// Initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializer (Do not use this View Controller in Interface Builder)
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Load View
- (void)loadView;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDelegate>
/// Collection View did select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
/// Collection View did de-select item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewCell;

@interface OpalImagePickerRootViewController (SWIFT_EXTENSION(OpalImagePicker)) <UICollectionViewDataSource>
/// Returns Collection View Cell for item at <code>IndexPath</code>
/// \param collectionView the <code>UICollectionView</code>
///
/// \param indexPath the <code>IndexPath</code>
///
///
/// returns:
/// Returns the <code>UICollectionViewCell</code>
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
/// Returns the number of items in a given section
/// \param collectionView the <code>UICollectionView</code>
///
/// \param section the given section of the <code>UICollectionView</code>
///
///
/// returns:
/// Returns an <code>Int</code> for the number of rows.
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
